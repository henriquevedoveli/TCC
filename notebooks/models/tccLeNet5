{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "tccLeNet5",
      "provenance": [],
      "mount_file_id": "1wZYoHeSitVNBCafWHuA0K2UYqffsdaSw",
      "authorship_tag": "ABX9TyM1Mf9dcP5dSGy92ZwFPepC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/henriquevedoveli/TCC/blob/main/notebooks/models/tccLeNet5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        " \n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import model_selection, metrics\n",
        "from sklearn.metrics import *\n",
        " \n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from keras.layers import Conv2D, AveragePooling2D, Flatten, Dense, Dropout, Input\n",
        " \n",
        "# keras models\n",
        "from keras.models import Sequential, Model, load_model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from keras.callbacks import ModelCheckpoint, EarlyStopping#\n",
        "\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.preprocessing import image  \n",
        " \n",
        "########################################################################################\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "pd.set_option('display.float_format', lambda x: '%.3f' % x)\n",
        "\n",
        "np.random.seed(7)\n",
        " \n",
        "import os\n",
        " \n",
        "%matplotlib inline"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gIbuzZWMy4kq",
        "outputId": "9766e131-ec7b-4d7e-838a-bbc342d22312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TRAIN = '/content/drive/MyDrive/TCC/data/chest_xray/train'\n",
        "TEST = '/content/drive/MyDrive/TCC/data/chest_xray/test'\n",
        "VAL = '/content/drive/MyDrive/TCC/data/chest_xray/val'\n",
        "\n",
        "MODELS = '/content/drive/MyDrive/TCC/MODELS'"
      ],
      "metadata": {
        "id": "ki_cKWfFzQJ_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trainData = ImageDataGenerator(zoom_range = [0.9, 1.25], \n",
        "                                        rotation_range = 10,\n",
        "                                        vertical_flip = True,\n",
        "                                        horizontal_flip = False, \n",
        "                                        width_shift_range = 0.1, \n",
        "                                        height_shift_range = 0.1,\n",
        "                                        # brightness_range = [0.5, 1],\n",
        "                                        # shear_range = .7,\n",
        "                                        fill_mode='constant', \n",
        "                                        cval=0)\n",
        "\n",
        "trainData = trainData.flow_from_directory(directory=TRAIN,\n",
        "                                       batch_size = 32,\n",
        "                                       target_size=(32,32),\n",
        "                                       color_mode = 'grayscale',\n",
        "                                      )\n",
        "\n",
        "\n",
        "valData = ImageDataGenerator()\n",
        "valData = valData.flow_from_directory(\n",
        "        VAL,\n",
        "        target_size = (32,32),\n",
        "        batch_size = 32,\n",
        "        color_mode = 'grayscale'\n",
        "        )\n",
        "\n",
        "\n",
        "testData = ImageDataGenerator()\n",
        "testData = testData.flow_from_directory(directory=TEST,\n",
        "                                      batch_size = 32,\n",
        "                                      target_size=(32,32),\n",
        "                                      color_mode = 'grayscale')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5rt2TwvhzS3n",
        "outputId": "58e990f0-b93d-4565-f14f-9e39663033e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 5082 images belonging to 3 classes.\n",
            "Found 150 images belonging to 3 classes.\n",
            "Found 624 images belonging to 3 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "normalLength = len(os.listdir(TRAIN + '/' + 'NORMAL'))\n",
        "bacterialLength = len(os.listdir(TRAIN + '/' + 'BACTERIAL'))\n",
        "viralLength = len(os.listdir(TRAIN + '/' + 'VIRAL'))\n",
        "dataLength = normalLength + bacterialLength +  viralLength\n",
        "\n",
        "print('Qtd dados de treino: ', dataLength)\n",
        "print('Qtd dados de pulmão saudavel para treino: ', normalLength)\n",
        "print('Qtd dados Bacterial', bacterialLength)\n",
        "print('Qtd dados Viral', viralLength)\n",
        "\n",
        "class_weight = {0: 1., # bacterial\n",
        "                1: bacterialLength / normalLength, #normal \n",
        "                2: bacterialLength / viralLength} # viral "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zadzjuASzugp",
        "outputId": "a3a9ced0-bdf5-4dfd-fe7a-22b2c36c5b45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Qtd dados de treino:  5082\n",
            "Qtd dados de pulmão saudavel para treino:  1299\n",
            "Qtd dados Bacterial 2488\n",
            "Qtd dados Viral 1295\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def generateImages(paths):\n",
        "    '''\n",
        "    params: paths ->\n",
        "    '''\n",
        "    test_images=[]\n",
        "    interpret= trainData.class_indices\n",
        "    test_y=[]\n",
        "    \n",
        "    for path in paths:\n",
        "        y=''\n",
        "        if 'NORMAL' in path:\n",
        "            y='NORMAL'\n",
        "        elif 'VIRAL' in path:   \n",
        "            y='VIRAL'\n",
        "        elif 'BACTERIAL' in path:   \n",
        "            y='BACTERIAL'   \n",
        "        \n",
        "        for image_path in os.listdir(path):\n",
        "            new_path=os.path.join(TEST, y)\n",
        "            new_path=os.path.join(new_path,image_path)\n",
        "\n",
        "            temp_images=image.load_img(new_path,\n",
        "                                       color_mode = 'grayscale',\n",
        "                                       target_size=(32,32)) \n",
        "            temp_images=image.img_to_array(temp_images)\n",
        "            test_images.append(temp_images)\n",
        "            test_y.append(interpret[y])\n",
        "\n",
        "    return test_images,test_y"
      ],
      "metadata": {
        "id": "-4jrtmNIzw0Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convertData(model, path, prob = 0):\n",
        "    '''\n",
        "    params: model ->\n",
        "            path ->\n",
        "            prob ->\n",
        "    '''\n",
        "    all_paths=[]\n",
        "    print(\"• GERANDO PATHS\")\n",
        "\n",
        "    ##### REVISAR #######\n",
        "    for directory in os.listdir(path):\n",
        "        all_paths.append(os.path.join(path,directory))\n",
        "    ##### REVISAR #######\n",
        "    \n",
        "    test_images, test_y= generateImages(all_paths)\n",
        "\n",
        "    test_images=np.array(test_images)\n",
        "\n",
        "    print(\"• GERANDO PREVISÕES\")\n",
        "    if prob == 0:\n",
        "        predictions = np.argmax(model.predict(test_images), axis=1)\n",
        "    else:\n",
        "        predictions = model.predict_on_batch(test_images)\n",
        "\n",
        "    ##### FAZER MODIFICACAO +75 AQ\n",
        "    ##### SUBSTITUIR PREDICTIONS POR PRED75\n",
        "    print(\"ACURACIA DO MODELO PARA OS DADOS DE TESTE: {}\".format( metrics.accuracy_score(test_y, predictions)))\n",
        "\n",
        "    return test_y, predictions, test_images"
      ],
      "metadata": {
        "id": "9gB_Cb9MzycI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "units = 430\n",
        "lr = 0.0001\n",
        "\n",
        "modelLeNet = Sequential()\n",
        "\n",
        "modelLeNet.add(Conv2D(filters=6, kernel_size = (5,5), activation='relu', input_shape=(32, 32, 1)))\n",
        "modelLeNet.add(AveragePooling2D(2,2))\n",
        "\n",
        "modelLeNet.add(Conv2D(filters=16, kernel_size = (5,5), activation='relu'))\n",
        "modelLeNet.add(AveragePooling2D(2,2))\n",
        "\n",
        "modelLeNet.add(Conv2D(filters=120, kernel_size = (5,5), activation='relu'))\n",
        "\n",
        "modelLeNet.add(Flatten())\n",
        "\n",
        "modelLeNet.add(Dense(units=units, activation='tanh'))\n",
        "modelLeNet.add(Dense(units=3, activation='softmax'))\n",
        "\n",
        "\n",
        "modelLeNet.compile(loss='categorical_crossentropy', \n",
        "                     optimizer=keras.optimizers.Adam(learning_rate=lr),\n",
        "                     metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "m8MDuhVlz42I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "modelLeNet.summary()"
      ],
      "metadata": {
        "id": "Vo3kEZTn728W",
        "outputId": "33ff9e5a-faf3-4752-8560-3905388168d2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_9 (Conv2D)           (None, 28, 28, 6)         156       \n",
            "                                                                 \n",
            " average_pooling2d_6 (Averag  (None, 14, 14, 6)        0         \n",
            " ePooling2D)                                                     \n",
            "                                                                 \n",
            " conv2d_10 (Conv2D)          (None, 10, 10, 16)        2416      \n",
            "                                                                 \n",
            " average_pooling2d_7 (Averag  (None, 5, 5, 16)         0         \n",
            " ePooling2D)                                                     \n",
            "                                                                 \n",
            " conv2d_11 (Conv2D)          (None, 1, 1, 120)         48120     \n",
            "                                                                 \n",
            " flatten_3 (Flatten)         (None, 120)               0         \n",
            "                                                                 \n",
            " dense_6 (Dense)             (None, 430)               52030     \n",
            "                                                                 \n",
            " dense_7 (Dense)             (None, 3)                 1293      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 104,015\n",
            "Trainable params: 104,015\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hist = modelLeNet.fit_generator(steps_per_epoch= trainData.n//32,\n",
        "                           generator=trainData, \n",
        "                           validation_data= valData,\n",
        "                           validation_steps=valData.n//32,\n",
        "                           epochs=50,\n",
        "                           class_weight = class_weight)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_sJeogCM0r-o",
        "outputId": "212af09d-fd70-49bb-87f8-cd838416b95a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "158/158 [==============================] - 778s 5s/step - loss: 0.8164 - accuracy: 0.7388 - val_loss: 0.7840 - val_accuracy: 0.6719\n",
            "Epoch 2/50\n",
            "158/158 [==============================] - 65s 409ms/step - loss: 0.8240 - accuracy: 0.7390 - val_loss: 0.6979 - val_accuracy: 0.7031\n",
            "Epoch 3/50\n",
            "158/158 [==============================] - 65s 409ms/step - loss: 0.7882 - accuracy: 0.7434 - val_loss: 0.5476 - val_accuracy: 0.7656\n",
            "Epoch 4/50\n",
            "158/158 [==============================] - 64s 405ms/step - loss: 0.7949 - accuracy: 0.7424 - val_loss: 0.7699 - val_accuracy: 0.7031\n",
            "Epoch 5/50\n",
            "158/158 [==============================] - 65s 412ms/step - loss: 0.7944 - accuracy: 0.7477 - val_loss: 0.6681 - val_accuracy: 0.7422\n",
            "Epoch 6/50\n",
            "158/158 [==============================] - 64s 405ms/step - loss: 0.8050 - accuracy: 0.7424 - val_loss: 0.7711 - val_accuracy: 0.6641\n",
            "Epoch 7/50\n",
            "158/158 [==============================] - 65s 410ms/step - loss: 0.7886 - accuracy: 0.7515 - val_loss: 0.6734 - val_accuracy: 0.7266\n",
            "Epoch 8/50\n",
            "158/158 [==============================] - 65s 412ms/step - loss: 0.7990 - accuracy: 0.7407 - val_loss: 0.5521 - val_accuracy: 0.7812\n",
            "Epoch 9/50\n",
            "158/158 [==============================] - 64s 408ms/step - loss: 0.7700 - accuracy: 0.7543 - val_loss: 0.7786 - val_accuracy: 0.6953\n",
            "Epoch 10/50\n",
            "158/158 [==============================] - 64s 404ms/step - loss: 0.7913 - accuracy: 0.7471 - val_loss: 0.5340 - val_accuracy: 0.7734\n",
            "Epoch 11/50\n",
            "158/158 [==============================] - 65s 410ms/step - loss: 0.8035 - accuracy: 0.7497 - val_loss: 0.5690 - val_accuracy: 0.7734\n",
            "Epoch 12/50\n",
            "158/158 [==============================] - 65s 409ms/step - loss: 0.7826 - accuracy: 0.7549 - val_loss: 0.5574 - val_accuracy: 0.7422\n",
            "Epoch 13/50\n",
            "158/158 [==============================] - 64s 405ms/step - loss: 0.7691 - accuracy: 0.7580 - val_loss: 0.5254 - val_accuracy: 0.7812\n",
            "Epoch 14/50\n",
            "158/158 [==============================] - 64s 407ms/step - loss: 0.7865 - accuracy: 0.7477 - val_loss: 0.5629 - val_accuracy: 0.7891\n",
            "Epoch 15/50\n",
            "158/158 [==============================] - 64s 407ms/step - loss: 0.7762 - accuracy: 0.7529 - val_loss: 0.5193 - val_accuracy: 0.7969\n",
            "Epoch 16/50\n",
            "158/158 [==============================] - 66s 415ms/step - loss: 0.7670 - accuracy: 0.7539 - val_loss: 0.4952 - val_accuracy: 0.7656\n",
            "Epoch 17/50\n",
            "158/158 [==============================] - 64s 408ms/step - loss: 0.7666 - accuracy: 0.7547 - val_loss: 0.8398 - val_accuracy: 0.6719\n",
            "Epoch 18/50\n",
            "158/158 [==============================] - 65s 408ms/step - loss: 0.7785 - accuracy: 0.7529 - val_loss: 0.7050 - val_accuracy: 0.7031\n",
            "Epoch 19/50\n",
            "158/158 [==============================] - 65s 411ms/step - loss: 0.7739 - accuracy: 0.7531 - val_loss: 0.4884 - val_accuracy: 0.7891\n",
            "Epoch 20/50\n",
            "158/158 [==============================] - 65s 408ms/step - loss: 0.7631 - accuracy: 0.7586 - val_loss: 0.4851 - val_accuracy: 0.7891\n",
            "Epoch 21/50\n",
            "158/158 [==============================] - 65s 409ms/step - loss: 0.7803 - accuracy: 0.7574 - val_loss: 0.7210 - val_accuracy: 0.7031\n",
            "Epoch 22/50\n",
            "158/158 [==============================] - 65s 411ms/step - loss: 0.7806 - accuracy: 0.7533 - val_loss: 0.6678 - val_accuracy: 0.7109\n",
            "Epoch 23/50\n",
            "158/158 [==============================] - 66s 415ms/step - loss: 0.7714 - accuracy: 0.7547 - val_loss: 0.6330 - val_accuracy: 0.7578\n",
            "Epoch 24/50\n",
            "158/158 [==============================] - 66s 418ms/step - loss: 0.7627 - accuracy: 0.7523 - val_loss: 0.5174 - val_accuracy: 0.7812\n",
            "Epoch 25/50\n",
            "158/158 [==============================] - 66s 418ms/step - loss: 0.7673 - accuracy: 0.7562 - val_loss: 0.6822 - val_accuracy: 0.7344\n",
            "Epoch 26/50\n",
            "158/158 [==============================] - 66s 415ms/step - loss: 0.7703 - accuracy: 0.7556 - val_loss: 0.5808 - val_accuracy: 0.7734\n",
            "Epoch 27/50\n",
            "158/158 [==============================] - 66s 418ms/step - loss: 0.7711 - accuracy: 0.7525 - val_loss: 0.5589 - val_accuracy: 0.7734\n",
            "Epoch 28/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7585 - accuracy: 0.7632 - val_loss: 0.5471 - val_accuracy: 0.7969\n",
            "Epoch 29/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7722 - accuracy: 0.7590 - val_loss: 0.5171 - val_accuracy: 0.7812\n",
            "Epoch 30/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7532 - accuracy: 0.7604 - val_loss: 0.6056 - val_accuracy: 0.7734\n",
            "Epoch 31/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7635 - accuracy: 0.7521 - val_loss: 0.4932 - val_accuracy: 0.8203\n",
            "Epoch 32/50\n",
            "158/158 [==============================] - 65s 410ms/step - loss: 0.7340 - accuracy: 0.7659 - val_loss: 0.5025 - val_accuracy: 0.8047\n",
            "Epoch 33/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7719 - accuracy: 0.7539 - val_loss: 0.6051 - val_accuracy: 0.7656\n",
            "Epoch 34/50\n",
            "158/158 [==============================] - 65s 414ms/step - loss: 0.7744 - accuracy: 0.7550 - val_loss: 0.6282 - val_accuracy: 0.7578\n",
            "Epoch 35/50\n",
            "158/158 [==============================] - 65s 414ms/step - loss: 0.7545 - accuracy: 0.7606 - val_loss: 0.5659 - val_accuracy: 0.7578\n",
            "Epoch 36/50\n",
            "158/158 [==============================] - 65s 414ms/step - loss: 0.7519 - accuracy: 0.7632 - val_loss: 0.5741 - val_accuracy: 0.7891\n",
            "Epoch 37/50\n",
            "158/158 [==============================] - 66s 415ms/step - loss: 0.7378 - accuracy: 0.7653 - val_loss: 0.6129 - val_accuracy: 0.7422\n",
            "Epoch 38/50\n",
            "158/158 [==============================] - 65s 415ms/step - loss: 0.7426 - accuracy: 0.7695 - val_loss: 0.6307 - val_accuracy: 0.7500\n",
            "Epoch 39/50\n",
            "158/158 [==============================] - 65s 414ms/step - loss: 0.7362 - accuracy: 0.7604 - val_loss: 0.6001 - val_accuracy: 0.7891\n",
            "Epoch 40/50\n",
            "158/158 [==============================] - 65s 414ms/step - loss: 0.7490 - accuracy: 0.7618 - val_loss: 0.5264 - val_accuracy: 0.7891\n",
            "Epoch 41/50\n",
            "158/158 [==============================] - 66s 417ms/step - loss: 0.7440 - accuracy: 0.7701 - val_loss: 0.6123 - val_accuracy: 0.7344\n",
            "Epoch 42/50\n",
            "158/158 [==============================] - 66s 417ms/step - loss: 0.7446 - accuracy: 0.7661 - val_loss: 0.4949 - val_accuracy: 0.8125\n",
            "Epoch 43/50\n",
            "158/158 [==============================] - 65s 413ms/step - loss: 0.7391 - accuracy: 0.7612 - val_loss: 0.6663 - val_accuracy: 0.7109\n",
            "Epoch 44/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7302 - accuracy: 0.7667 - val_loss: 0.5857 - val_accuracy: 0.7891\n",
            "Epoch 45/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7458 - accuracy: 0.7653 - val_loss: 0.4574 - val_accuracy: 0.7969\n",
            "Epoch 46/50\n",
            "158/158 [==============================] - 66s 417ms/step - loss: 0.7416 - accuracy: 0.7650 - val_loss: 0.5805 - val_accuracy: 0.7734\n",
            "Epoch 47/50\n",
            "158/158 [==============================] - 66s 416ms/step - loss: 0.7348 - accuracy: 0.7673 - val_loss: 0.5948 - val_accuracy: 0.7422\n",
            "Epoch 48/50\n",
            "158/158 [==============================] - 66s 417ms/step - loss: 0.7221 - accuracy: 0.7685 - val_loss: 0.6954 - val_accuracy: 0.7500\n",
            "Epoch 49/50\n",
            "158/158 [==============================] - 65s 411ms/step - loss: 0.7413 - accuracy: 0.7604 - val_loss: 0.4342 - val_accuracy: 0.8281\n",
            "Epoch 50/50\n",
            "158/158 [==============================] - 65s 410ms/step - loss: 0.7294 - accuracy: 0.7638 - val_loss: 0.6618 - val_accuracy: 0.7344\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp = pd.DataFrame([hist.history['accuracy'], hist.history['val_accuracy'], hist.history['loss'], hist.history['val_loss']])\n",
        "\n",
        "histT = temp.T\n",
        "histT.columns = ['acc', 'val_acc', 'loss', 'val_loss']\n",
        "\n",
        "from google.colab import files\n",
        "numEpoch = 50\n",
        "histT.to_csv(f'histTreinoLENET{numEpoch}.csv')\n",
        "files.download(f'histTreinoLENET{numEpoch}.csv')"
      ],
      "metadata": {
        "id": "RppktCGf5_sn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "b2d994d7-ea46-436d-e14c-ea4f1b3b8429"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_892fb721-e4f2-458c-b881-db57c966ba8a\", \"histTreinoLENET50.csv\", 3442)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp = pd.DataFrame([hist.history['accuracy'], hist.history['val_accuracy'], hist.history['loss'], hist.history['val_loss']])\n",
        "\n",
        "tempT = temp.T\n",
        "tempT.columns = ['acc', 'val_acc', 'loss', 'val_loss']\n",
        "\n",
        "histTreinoatg = pd.read_csv('histTreinoLENET50.csv')\n",
        "histTreinoatg = histTreinoatg[['acc', 'val_acc', 'loss', 'val_loss']]\n",
        "histT = histTreinoatg.append(tempT)\n",
        "histT = histT.reset_index(drop=True)\n",
        "\n",
        "from google.colab import files\n",
        "numEpoch = 100\n",
        "histT.to_csv(f'histTreinoLENET{numEpoch}.csv')\n",
        "files.download(f'histTreinoLENET{numEpoch}.csv')\n"
      ],
      "metadata": {
        "id": "yDM1lZah6EaP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "93a9dd7b-f0ae-4797-f84b-d9ef65b3a1ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_6fdb5e89-63fc-4d14-9c9d-493c498069a5\", \"histTreinoLENET100.csv\", 6889)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axs = plt.subplots(1,2)\n",
        "fig.set_figheight(5)\n",
        "fig.set_figwidth(15)\n",
        "\n",
        "axs[0].plot(histT.index + 1, histT['acc'])\n",
        "axs[0].plot(histT.index + 1, histT['val_acc'], '--')\n",
        "axs[0].set_title('(a)', size = 25)\n",
        "axs[0].set_xlabel(\"EPOCAS\", size = 16)\n",
        "axs[0].set_ylabel(\"ACURÁCIA\", size =16)\n",
        "axs[0].set_yticks([0.3,0.4,0.5,0.6,0.7,0.8,0.9,1])\n",
        "axs[0].set_xticks([1,10,20,30,40,50,60,70,80,90,100])\n",
        "axs[0].legend(['ACURACIA TREINO', 'ACURACIA VALIDACAO'])\n",
        "axs[0].grid(True)\n",
        "\n",
        "axs[1].plot(histT.index + 1, histT['loss'])\n",
        "axs[1].plot(histT.index + 1, histT['val_loss'], '--')\n",
        "axs[1].set_title('(b)', size = 25)\n",
        "axs[1].set_xlabel(\"EPOCAS\", size =16)\n",
        "axs[1].set_ylabel(\"CUSTO\", size =16)\n",
        "axs[1].legend(['CUSTO TREINO', 'CUSTO VALIDACAO'])\n",
        "# axs[1].set_yticks([1.8,1.6,1.4,1.2,1,.8,.6,.4,.2,0])\n",
        "axs[1].set_xticks([1,10,20,30,40,50,60,70,80,90,100])\n",
        "axs[1].grid(True)\n",
        "\n",
        "plt.plot()"
      ],
      "metadata": {
        "id": "r7r9NYiZ6LMv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "outputId": "bf5b3deb-7aec-405c-d77b-7c272bd3f6ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "modelLeNet.save('/content/drive/MyDrive/TCC/MODELS/LENETMODEL')"
      ],
      "metadata": {
        "id": "48ja9e3_6OTe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd60b27e-7c4f-4128-f387-3621be26e602"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /content/drive/MyDrive/TCC/MODELS/LENETMODEL/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# modelLeNet = keras.models.load_model('/content/drive/MyDrive/TCC/MODELS/LENETMODEL')"
      ],
      "metadata": {
        "id": "pCdzEorI6XJQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_y, pred, test_images = convertData(modelLeNet, TEST, 0)\n",
        "\n",
        "matrix = metrics.confusion_matrix(test_y, pred)\n",
        "\n",
        "# labels = \n",
        "labels = ['Bacteriana' , 'Normal', 'Viral']\n",
        "\n",
        "df_cm = pd.DataFrame(matrix, index = [i for i in \"012\"],\n",
        "                  columns = [i for i in \"012\"])\n",
        "\n",
        "df_cm.index = labels\n",
        "df_cm.columns = labels\n",
        "\n",
        "plt.figure(figsize = (10,7))\n",
        "ax = sns.heatmap(df_cm, annot=True, fmt='g')\n",
        "ax.set_title(\"Matriz de confusão para os dados de teste\\n\", size = 24)\n",
        "ax"
      ],
      "metadata": {
        "id": "SKvxDtS26ck4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 550
        },
        "outputId": "dd9d52f8-1c1d-46ca-9fea-db59d21891a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "• GERANDO PATHS\n",
            "• GERANDO PREVISÕES\n",
            "ACURACIA DO MODELO PARA OS DADOS DE TESTE: 0.7980769230769231\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc3fef9a290>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1 = f1_score(test_y, pred, average= None)\n",
        "recall = recall_score(test_y, pred, average= None)\n",
        "precision = precision_score(test_y, pred, average= None)\n",
        "\n",
        "metricas = pd.DataFrame([recall, precision, f1], columns=['Bacteriana' , 'Normal', 'Viral'], index = ['Recall', 'Precision','F1-Score']).T\n",
        "metricas"
      ],
      "metadata": {
        "id": "qYdkMZwB6geY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "outputId": "4c79d243-a9d9-42f9-c4a1-ef360a009b1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-cc7f3651-bdf0-4c62-a0a2-e17b9172d4f1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Bacteriana</th>\n",
              "      <td>0.880</td>\n",
              "      <td>0.845</td>\n",
              "      <td>0.862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Normal</th>\n",
              "      <td>0.957</td>\n",
              "      <td>0.757</td>\n",
              "      <td>0.845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Viral</th>\n",
              "      <td>0.412</td>\n",
              "      <td>0.803</td>\n",
              "      <td>0.545</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc7f3651-bdf0-4c62-a0a2-e17b9172d4f1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cc7f3651-bdf0-4c62-a0a2-e17b9172d4f1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cc7f3651-bdf0-4c62-a0a2-e17b9172d4f1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Recall  Precision  F1-Score\n",
              "Bacteriana   0.880      0.845     0.862\n",
              "Normal       0.957      0.757     0.845\n",
              "Viral        0.412      0.803     0.545"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testBin = test_y\n",
        "predBin = pred\n",
        "\n",
        "i = 0\n",
        "while i < len(pred):\n",
        "    if predBin[i] == 0:\n",
        "        predBin[i] = 3\n",
        "    elif predBin[i] == 2:\n",
        "        predBin[i] = 3\n",
        "\n",
        "    i += 1\n",
        "\n",
        "k = 0\n",
        "while k < len(test_y):\n",
        "    if testBin[k] == 0:\n",
        "        testBin[k] = 3\n",
        "    elif testBin[k] == 2:\n",
        "        testBin[k] = 3\n",
        "\n",
        "    k += 1"
      ],
      "metadata": {
        "id": "4Grrprki6hjP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matrix = metrics.confusion_matrix(testBin, predBin)\n",
        "\n",
        "# labels = \n",
        "labels = ['Normal' , 'Pneumonia']\n",
        "\n",
        "df_cm = pd.DataFrame(matrix, index = [i for i in \"01\"],\n",
        "                  columns = [i for i in \"01\"])\n",
        "\n",
        "df_cm.index = labels\n",
        "df_cm.columns = labels\n",
        "\n",
        "plt.figure(figsize = (10,7))\n",
        "ax = sns.heatmap(df_cm, annot=True, fmt='g')\n",
        "ax.set_title(\"Matriz de confusão para os dados de teste\\n\", size = 24)\n",
        "ax"
      ],
      "metadata": {
        "id": "0lNiEmsp6izn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "outputId": "cad5fc05-0194-422f-bdc5-4a5f7e78cace"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc385da1490>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1 = f1_score(testBin, predBin, average= None)\n",
        "recall = recall_score(testBin, predBin, average= None)\n",
        "precision = precision_score(testBin, predBin, average= None)\n",
        "acc = accuracy_score(testBin, predBin)\n",
        "\n",
        "print('ACC:', acc)\n",
        "\n",
        "metricas = pd.DataFrame([recall, precision, f1], columns=['Normal' , 'Pneumonia'], index = ['Recall', 'Precision','F1-Score']).T\n",
        "metricas\n"
      ],
      "metadata": {
        "id": "0FEQa0Mz6kWn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        },
        "outputId": "ade0bf1c-7605-4d82-b92f-084ce0b059a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ACC: 0.8685897435897436\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-af9e48ff-3676-4d9c-b750-f3394860583f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Normal</th>\n",
              "      <td>0.957</td>\n",
              "      <td>0.757</td>\n",
              "      <td>0.845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pneumonia</th>\n",
              "      <td>0.815</td>\n",
              "      <td>0.970</td>\n",
              "      <td>0.886</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af9e48ff-3676-4d9c-b750-f3394860583f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-af9e48ff-3676-4d9c-b750-f3394860583f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-af9e48ff-3676-4d9c-b750-f3394860583f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "           Recall  Precision  F1-Score\n",
              "Normal      0.957      0.757     0.845\n",
              "Pneumonia   0.815      0.970     0.886"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    }
  ]
}